---
import "../styles/global.css";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>TrollBot Dashboard</title>
    <script>
      // Check for authentication immediately
      function checkAuth() {
        const urlParams = new URLSearchParams(window.location.search);
        const username = urlParams.get('user');
        const password = urlParams.get('password');
        
        if (!username || !password) {
          window.location.href = '/';
        }
      }
      
      // checkAuth();
    </script>
  </head>
  <body class="bg-gray-900 text-gray-200 min-h-screen p-4">
    <div class="max-w-4xl mx-auto">
      <!-- Header -->
      <header class="mb-8 text-center">
        <h1 class="text-3xl font-bold text-blue-400 mb-2">TrollBot Dashboard</h1>
        <p class="text-gray-400">Control panel for game attacks</p>
      </header>
      
      <!-- Main Dashboard -->
      <div class="bg-gray-800 rounded-lg shadow-lg p-6">
        <!-- Game ID Input -->
        <div class="mb-6">
          <label for="gameId" class="block text-sm font-medium text-gray-300 mb-2">Blooket Game ID</label>
          <input 
            type="text" 
            id="gameId" 
            class="w-full px-4 py-2 rounded-md bg-gray-700 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition"
            placeholder="Enter Blooket Game ID" 
          />
        </div>
        
        <!-- Game Mode Selection -->
        <div class="mb-6">
          <h3 class="text-lg font-medium text-gray-300 mb-3">Select Game Mode</h3>
          <div class="grid grid-cols-2 gap-4 md:grid-cols-4">
            <button 
              class="game-mode-btn px-4 py-3 bg-gray-700 hover:bg-blue-600 rounded-md transition border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500" 
              data-mode="cafe"
            >
              Caf√©
            </button>
            <button 
              class="game-mode-btn px-4 py-3 bg-gray-700 hover:bg-blue-600 rounded-md transition border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500" 
              data-mode="fish"
            >
              Fishing Frenzy
            </button>
            <button 
              class="game-mode-btn px-4 py-3 bg-gray-700 hover:bg-blue-600 rounded-md transition border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500" 
              data-mode="gold"
            >
              Gold Quest
            </button>
            <button 
              class="game-mode-btn px-4 py-3 bg-gray-700 hover:bg-blue-600 rounded-md transition border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500" 
              data-mode="crypto"
            >
              Crypto Hack
            </button>
          </div>
        </div>
        
        <!-- Attack Button -->
        <div class="mt-6 flex justify-center">
          <button 
            id="launchAttack" 
            class="py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-800 flex items-center justify-center"
            disabled
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
            Launch Attack
          </button>
        </div>
      </div>
    </div>

    <script>
      let selectedMode = null;
      let username = '';
      let password = '';
      const launchButton = document.getElementById('launchAttack');
      
      // Extract credentials from URL query parameters
      function getCredentialsFromUrl() {
        const urlParams = new URLSearchParams(window.location.search);
        username = urlParams.get('user') || '';
        password = urlParams.get('password') || '';
        
        // Remove credentials from URL for security (optional)
        if (username && password) {
          const cleanUrl = window.location.pathname;
          window.history.replaceState({}, document.title, cleanUrl);
        }
      }
      
      // Set up game mode selection
      document.querySelectorAll('.game-mode-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          // Remove active class from all buttons
          document.querySelectorAll('.game-mode-btn').forEach(b => {
            b.classList.remove('bg-blue-600');
            b.classList.add('bg-gray-700');
          });
          
          // Add active class to selected button
          btn.classList.remove('bg-gray-700');
          btn.classList.add('bg-blue-600');
          
          // Store selected mode
          selectedMode = btn.getAttribute('data-mode');
          updateLaunchButton();
        });
      });
      
      // Check if launch button should be enabled
      function updateLaunchButton() {
        const gameId = document.getElementById('gameId').value.trim();
        launchButton.disabled = !gameId || !selectedMode;
        
        if (launchButton.disabled) {
          launchButton.classList.add('opacity-50', 'cursor-not-allowed');
        } else {
          launchButton.classList.remove('opacity-50', 'cursor-not-allowed');
        }
      }
      
      // Listen for changes in the game ID field
      document.getElementById('gameId').addEventListener('input', updateLaunchButton);
      
      // Launch attack handler
      launchButton.addEventListener('click', async () => {
        const gameId = document.getElementById('gameId').value.trim();
        
        if (!gameId || !selectedMode || !username || !password) {
          return;
        }
        
        try {
          // Create authentication header
          const authHeader = 'Basic ' + btoa(`${username}:${password}`);
          
          // Make request to backend with auth header
          await fetch(`https://trollbotbackend-production.up.railway.app/join?id=${gameId}&mode=${selectedMode}`, {
            method: 'GET',
            headers: {
              'Authorization': authHeader
            }
          });
        } catch (error) {
          console.error("Connection error:", error.message);
        }
      });
      
      // Initialize on page load
      getCredentialsFromUrl();
      updateLaunchButton();
    </script>
  </body>
</html>